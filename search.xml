<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MNMP WordPress</title>
      <link href="2021/04/22/mnmp-wordpess/"/>
      <url>2021/04/22/mnmp-wordpess/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>1.安装</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> nginxbrew services start nginx</code></pre><p>2.为方便管理，在 nginx 配置目录下的 <code>servers</code> 新增一个配置文件<a href="http://www.conf/">www.conf</a></p><pre class=" language-bash"><code class="language-bash">vim /usr/local/etc/nginx/servers/www.conf</code></pre><p>并在<a href="http://www.conf中填充以下内容：">www.conf中填充以下内容：</a></p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 如果需要域名访问的话，注意需要修改 /etc/hosts 文件</span>    <span class="token comment" spellcheck="true"># server_name  bingolin.dev;</span>      <span class="token comment" spellcheck="true"># 项目根目录</span>    root /Users/bingolin/www<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        index index.php index.html<span class="token punctuation">;</span>        autoindex on<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：最好每个项目都单独一个配置文件。从上面的配置中可以看出将项目放在用户下的 <code>www</code> 文件夹下，在这个文件夹中新建一个 html 文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/wwwvim ~/www/index.html</code></pre><p>重启一下 nginx 服务</p><pre class=" language-bash"><code class="language-bash">brew services restart nginx</code></pre><p>访问刚刚配置的主机，在浏览器网址输入localhost就可以访问到上面这个 html 文件</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>1.安装</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> phpbrew services start php</code></pre><p>2.替换系统自带的 php-fpm：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'export PATH="/usr/local/opt/php/sbin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span> ~/.zshrc<span class="token function">source</span> ~/.zshrc</code></pre><p>3.查看版本信息：</p><pre class=" language-bash"><code class="language-bash">php -vphp-fpm -v</code></pre><p>4.修改 nginx 的主机配置，使它支持 PHP</p><pre class=" language-bash"><code class="language-bash">vim /usr/local/etc/nginx/servers/www.conf</code></pre><p>修改后的<a href="http://www.conf/">www.conf</a> 内容为：</p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 如果需要域名访问的话，注意需要修改 /etc/hosts 文件</span>    <span class="token comment" spellcheck="true"># server_name  bingolin.dev;</span>      <span class="token comment" spellcheck="true"># 项目根目录</span>    root /Users/bingolin/www<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        index index.php index.html<span class="token punctuation">;</span>        autoindex on<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#新增加的内容</span>    location ~ \.php$ <span class="token punctuation">{</span>        fastcgi_pass   127.0.0.1:9000<span class="token punctuation">;</span>        fastcgi_index  index.php<span class="token punctuation">;</span>        fastcgi_param  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>        include        fastcgi_params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>5.重启 nginx 服务</p><pre class=" language-bash"><code class="language-bash">brew services restart nginx</code></pre><p>6.在项目根目录新增一个 php 文件</p><pre class=" language-bash"><code class="language-bash">vim ~/www/index.php</code></pre><p>内容为：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php    phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在浏览器网址输入localhost就可以访问到上面这个 php 文件</p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>详见Mysql Learning.md</p><p>电脑重新启动，以防止出现brew services  error </p><h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><p>1.安装</p><p>去官网下载Wordpress压缩包，并解压到之前的配置的用户下的 <code>www</code> 文件夹中</p><p>2.首先在在Mysql中建立一个名为Wordpress的数据库</p><pre class=" language-bash"><code class="language-bash">mysql -uBingoLin -pcreate database Wordpress<span class="token punctuation">;</span></code></pre><p>3.通过浏览器访问 <code>localhost/wordpress</code> ，就可以看到一个 Wordpress 的安装界面，输入数据库相关的信息 ，就成功安装了。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS Nginx Mysql Php WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS Terminal Beautify</title>
      <link href="2021/04/22/macos-terminal-beautify/"/>
      <url>2021/04/22/macos-terminal-beautify/</url>
      
        <content type="html"><![CDATA[<p>从<code>MacOS Catalina</code>开始默认终端已经是<code>zsh</code>。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>使用以下命令可以查看当前终端，</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable">$SHELL</span></code></pre><p><strong>如果不是<code>/bin/zsh</code>，执行以下命令切换到<code>zsh</code>，否则跳过此步。</strong></p><pre class=" language-bash"><code class="language-bash">chsh -s /bin/zsh</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> vimbrew <span class="token function">install</span> <span class="token function">git</span><span class="token comment" spellcheck="true"># 下载oh-my-zsh</span><span class="token function">git</span> clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<span class="token comment" spellcheck="true"># 创建一个新的配置文件</span><span class="token function">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<span class="token comment" spellcheck="true"># 授权，如果不授权每次会有警告</span><span class="token function">chmod</span> 755 /usr/local/share/zsh<span class="token function">chmod</span> 755 /usr/local/share/zsh/site-functions</code></pre><p>退出并重启终端 command q</p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载命令高亮插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting<span class="token comment" spellcheck="true"># 配置插件生效</span><span class="token keyword">echo</span> <span class="token string">'# 命令高亮\nsource ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh'</span> <span class="token operator">>></span> ~/.zshrc<span class="token comment" spellcheck="true"># 下载命令提示插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions<span class="token comment" spellcheck="true"># 配置插件生效</span><span class="token keyword">echo</span> <span class="token string">'# 命令提示\nsource ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh'</span> <span class="token operator">>></span> ~/.zshrc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/21/hello-world/"/>
      <url>2021/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
