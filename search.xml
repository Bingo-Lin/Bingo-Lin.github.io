<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql Order</title>
      <link href="posts/51460.html"/>
      <url>posts/51460.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><pre class=" language-mysql"><code class="language-mysql">show databases;</code></pre><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><pre class=" language-mysql"><code class="language-mysql">use databasesName;</code></pre><h2 id="查看该数据库中有哪些表"><a href="#查看该数据库中有哪些表" class="headerlink" title="查看该数据库中有哪些表"></a>查看该数据库中有哪些表</h2><pre class=" language-mysql"><code class="language-mysql">show tables;</code></pre><h2 id="查询表中数据"><a href="#查询表中数据" class="headerlink" title="查询表中数据"></a>查询表中数据</h2><pre class=" language-mysql"><code class="language-mysql">select * from tableName;</code></pre><h2 id="退出数据库服务器"><a href="#退出数据库服务器" class="headerlink" title="退出数据库服务器"></a>退出数据库服务器</h2><pre class=" language-mysql"><code class="language-mysql">exit;</code></pre><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class=" language-mysql"><code class="language-mysql">create database databaseName;</code></pre><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>以创建student表为例：</p><pre class=" language-mysql"><code class="language-mysql">create table student(  id int primary key auto_increment,  name VARCHAR(20),  gender CHAR(1),  birth DATE,  death DATE );</code></pre><p>注意：1.var()定常:哪怕存储的字符串没有达到”()”中数字的上限,var()依然会占用空格来填充空间.varchar()不定长,没有达到”()”中的上限则会自动去掉后面的空格;</p><p>2.定义最后一个字段的时候不要加”,”; </p><p>3.上面的”VAR”,”VARCHAR”,”DATE”可以用小写.不过最好用大写来表示区分关键字;</p><p>4.切换到英语状态下半角输入；</p><h2 id="查看数据表表结构"><a href="#查看数据表表结构" class="headerlink" title="查看数据表表结构"></a>查看数据表表结构</h2><pre class=" language-mysql"><code class="language-mysql">desc tableName; </code></pre><p>以student表为例：</p><pre class=" language-mysql"><code class="language-mysql">mysql> desc student;+--------+-------------+------+-----+---------+----------------+| Field  | Type        | Null | Key | Default | Extra          |+--------+-------------+------+-----+---------+----------------+| id     | int         | NO   | PRI | NULL    | auto_increment || name   | varchar(20) | YES  |     | NULL    |                || gender | char(1)     | YES  |     | NULL    |                || birth  | date        | YES  |     | NULL    |                || death  | date        | YES  |     | NULL    |                |+--------+-------------+------+-----+---------+----------------+5 rows in set (0.01 sec)</code></pre><p>说明：</p><p>Field ：字段名称</p><p>Type ：字段类型，比如 int , date , char , varchar</p><p>Key   :  是否是关键字，比如可以定义为： primary key 或者 unique key </p><p>Default  :  若是该字段没有主动设置值的时候,定义该字段的默认值</p><p>Extra :  auto_increment 表示自增；</p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><pre class=" language-mysql"><code class="language-mysql">insert into student values(null,'BingoLin','1','1995-01-01',null);</code></pre><p>注意：是 null ，不是  ‘Null’  </p><p>或者</p><pre class=" language-mysql"><code class="language-mysql">insert into student(name,gender,birth) values('BingoLin','1','1995-01-01');</code></pre><p>此时，已经向student增加了两条记录，这两条记录除了id 外一模一样。</p><p>使用select命令查看表，显示如下：</p><pre class=" language-mysql"><code class="language-mysql">mysql> select * from student;+----+----------+--------+------------+-------+| id | name     | gender | birth      | death |+----+----------+--------+------------+-------+|  1 | BingoLin | 1      | 1995-01-01 | NULL  ||  2 | BingoLin | 1      | 1995-01-01 | NULL  |+----+----------+--------+------------+-------+2 rows in set (0.00 sec)</code></pre><p> 注意： NULL:代表的是空,表示该字段还没有数据.</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><pre class=" language-mysql"><code class="language-mysql">delete from tableName where <条件></code></pre><p>以student 表为例:</p><pre class=" language-mysql"><code class="language-mysql">delete from student where id = 2;</code></pre><p>上诉命令，意思是删除 student 表 中  id 为 2 的记录。</p><p>删除后的表查询结果如下：</p><pre class=" language-mysql"><code class="language-mysql">mysql> select * from student;+----+----------+--------+------------+-------+| id | name     | gender | birth      | death |+----+----------+--------+------------+-------+|  1 | BingoLin | 1      | 1995-01-01 | NULL  |+----+----------+--------+------------+-------+1 row in set (0.00 sec)</code></pre><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><pre class=" language-mysql"><code class="language-mysql">update tableName set 字段1=值1,字段2=值2 ... where <条件>;</code></pre><p>以student 表为例:</p><pre class=" language-mysql"><code class="language-mysql">update student set gender='0',birth = '1995-02-01' where name = 'BingoLin' ;</code></pre><p>以上例子表示： 修改student 表 中  name 字段值为 BingoLin 的记录。修改方案是将Bingo Lin所在的这条记录中 的gender字段值设置为0，birth字段值设置为1995-02-01。</p><p>修改完成后，表查询结果如下：</p><pre class=" language-mysql"><code class="language-mysql">mysql> select * from student;+----+----------+--------+------------+-------+| id | name     | gender | birth      | death |+----+----------+--------+------------+-------+|  1 | BingoLin | 0      | 1995-02-01 | NULL  |+----+----------+--------+------------+-------+1 row in set (0.00 sec)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Github</title>
      <link href="posts/25144.html"/>
      <url>posts/25144.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span class="token function">which</span> <span class="token function">git</span> <span class="token comment" spellcheck="true">#查看git路径 确保使用最新的git</span><span class="token comment" spellcheck="true">#配置git</span><span class="token function">git</span> config --global user.name <span class="token string">"BingoLin"</span> <span class="token function">git</span> config --global user.email BingoLin@pm.me<span class="token comment" spellcheck="true">#配置ssh key</span>ssh-keygen -t rsa -C <span class="token string">"BingoLin@pm.me"</span><span class="token function">cat</span> /Users/bingolin/.ssh/id_rsa.pub <span class="token comment" spellcheck="true">#打开id_rsa.pub文件，复制里面的key 数据</span></code></pre><p>注册GitHub网站后，点击头像，setting ，找到ssh and GPG keys ,按提示添加 刚复制的 key 数据</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com <span class="token comment" spellcheck="true">#验证</span></code></pre><p>出现 Hi Bingo-Lin! You’ve successfully authenticated, but GitHub does not provide shell access. 即链接成功。</p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="posts/25246.html"/>
      <url>posts/25246.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span> <span class="token function">git</span> clone git@github.com:Bingo-Lin/Bingo-Lin.github.io.git  <span class="token comment" spellcheck="true">#将GitHub上的仓库克隆到本地 </span></code></pre><p>对本地仓库进行操作后</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true">#将文件添加到本地仓库（ .代表添加所有文件 ）</span><span class="token function">git</span> commit -m <span class="token string">"添加本次提交的名称"</span>  <span class="token comment" spellcheck="true">#将文件提交到本地仓库</span><span class="token function">git</span> push <span class="token comment" spellcheck="true">#上传到GitHub</span><span class="token function">git</span> pull <span class="token comment" spellcheck="true">#从Github拉取最新更新并合并到本地仓库</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Install</title>
      <link href="posts/62688.html"/>
      <url>posts/62688.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> mysql mysql.server startmysql_secure_installation <span class="token comment" spellcheck="true">#根据提示设置</span></code></pre><p>注意一定要先运行第2步，再运行第3步，否则可能会出现以下错误：Error: Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2)</p><h2 id="Create-user"><a href="#Create-user" class="headerlink" title="Create user"></a>Create user</h2><pre class=" language-bash"><code class="language-bash">mysql -uroot -p</code></pre><p>输入管理员密码后进入mysql界面</p><pre class=" language-bash"><code class="language-bash">create user <span class="token string">'xxx'</span>@<span class="token string">'%'</span> identified by <span class="token string">'xyz'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#指定任何ip的名为xxx的用户登录,密码为xyz</span>grant all privileges  on *.*  to <span class="token string">"xxx"</span>@<span class="token string">'%'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#授权xxx用户对所有数据库中文件有任何操作，此时xxx用户拥有除了grant这个命令外的所有的权限，grant这个命令是root才有的</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube-dl</title>
      <link href="posts/1439.html"/>
      <url>posts/1439.html</url>
      
        <content type="html"><![CDATA[<h2 id="Youtube-dl"><a href="#Youtube-dl" class="headerlink" title="Youtube-dl"></a>Youtube-dl</h2><p>使用<code>--output-dir</code>/<code>-o</code> 设定输出路径,</p><pre class=" language-bash"><code class="language-bash">youtube-dl -o <span class="token string">'/Volumes/BingoLinData/Downloads/%(title)s.%(ext)s'</span>  https://www.youtube.com/watch?v<span class="token operator">=</span>HOyTH0QQvwk</code></pre>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Youtube-dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>You-get</title>
      <link href="posts/21982.html"/>
      <url>posts/21982.html</url>
      
        <content type="html"><![CDATA[<h2 id="You-get"><a href="#You-get" class="headerlink" title="You-get"></a>You-get</h2><p>使用<code>--output-dir</code>/<code>-o</code> 设定输出路径, <code>--output-filename</code>/<code>-O</code> 设定输出文件名:</p><pre class=" language-bash"><code class="language-bash">you-get -o /Volumes/BingoLinData/Downloads --format<span class="token operator">=</span>dash-flv  https://www.bilibili.com/video/BV1vv41177jq</code></pre>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> You-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smartmontools</title>
      <link href="posts/7.html"/>
      <url>posts/7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Smartmontools"><a href="#Smartmontools" class="headerlink" title="Smartmontools"></a>Smartmontools</h2><p>在Terminal执行以下命令:</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> smartmontools <span class="token comment" spellcheck="true">#安装</span>diskutil list <span class="token comment" spellcheck="true">#查找要测试「卷」的驱动器标识符</span>smartctl -a /dev/disk0 <span class="token comment" spellcheck="true">#获取指定驱动器的 SMART 状态</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Smartmontools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MNMP WordPress</title>
      <link href="posts/16928.html"/>
      <url>posts/16928.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>1.安装</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> nginxbrew services start nginx</code></pre><p>2.为方便管理，在 nginx 配置目录下的 <code>servers</code> 新增一个配置文件<a href="http://www.conf/">www.conf</a></p><pre class=" language-bash"><code class="language-bash">vim /usr/local/etc/nginx/servers/www.conf</code></pre><p>并在<a href="http://www.conf中填充以下内容：">www.conf中填充以下内容：</a></p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 如果需要域名访问的话，注意需要修改 /etc/hosts 文件</span>    <span class="token comment" spellcheck="true"># server_name  bingolin.dev;</span>      <span class="token comment" spellcheck="true"># 项目根目录</span>    root /Users/bingolin/www<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        index index.php index.html<span class="token punctuation">;</span>        autoindex on<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：最好每个项目都单独一个配置文件。从上面的配置中可以看出将项目放在用户下的 <code>www</code> 文件夹下，在这个文件夹中新建一个 html 文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/wwwvim ~/www/index.html</code></pre><p>重启一下 nginx 服务</p><pre class=" language-bash"><code class="language-bash">brew services restart nginx</code></pre><p>访问刚刚配置的主机，在浏览器网址输入localhost就可以访问到上面这个 html 文件</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>1.安装</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> phpbrew services start php</code></pre><p>2.替换系统自带的 php-fpm：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'export PATH="/usr/local/opt/php/sbin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span> ~/.zshrc<span class="token function">source</span> ~/.zshrc</code></pre><p>3.查看版本信息：</p><pre class=" language-bash"><code class="language-bash">php -vphp-fpm -v</code></pre><p>4.修改 nginx 的主机配置，使它支持 PHP</p><pre class=" language-bash"><code class="language-bash">vim /usr/local/etc/nginx/servers/www.conf</code></pre><p>修改后的<a href="http://www.conf/">www.conf</a> 内容为：</p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 如果需要域名访问的话，注意需要修改 /etc/hosts 文件</span>    <span class="token comment" spellcheck="true"># server_name  bingolin.dev;</span>      <span class="token comment" spellcheck="true"># 项目根目录</span>    root /Users/bingolin/www<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        index index.php index.html<span class="token punctuation">;</span>        autoindex on<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#新增加的内容</span>    location ~ \.php$ <span class="token punctuation">{</span>        fastcgi_pass   127.0.0.1:9000<span class="token punctuation">;</span>        fastcgi_index  index.php<span class="token punctuation">;</span>        fastcgi_param  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>        include        fastcgi_params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>5.重启 nginx 服务</p><pre class=" language-bash"><code class="language-bash">brew services restart nginx</code></pre><p>6.在项目根目录新增一个 php 文件</p><pre class=" language-bash"><code class="language-bash">vim ~/www/index.php</code></pre><p>内容为：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php    phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在浏览器网址输入localhost就可以访问到上面这个 php 文件</p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>详见Mysql Learning.md</p><p>电脑重新启动，以防止出现brew services  error </p><h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><p>1.安装</p><p>去官网下载Wordpress压缩包，并解压到之前的配置的用户下的 <code>www</code> 文件夹中</p><p>2.首先在在Mysql中建立一个名为Wordpress的数据库</p><pre class=" language-bash"><code class="language-bash">mysql -uBingoLin -pcreate database Wordpress<span class="token punctuation">;</span></code></pre><p>3.通过浏览器访问 <code>localhost/wordpress</code> ，就可以看到一个 Wordpress 的安装界面，输入数据库相关的信息 ，就成功安装了。</p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MNMP </tag>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS Terminal Beautify</title>
      <link href="posts/26062.html"/>
      <url>posts/26062.html</url>
      
        <content type="html"><![CDATA[<p>从<code>MacOS Catalina</code>开始默认终端已经是<code>zsh</code>。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>使用以下命令可以查看当前终端，</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable">$SHELL</span></code></pre><p><strong>如果不是<code>/bin/zsh</code>，执行以下命令切换到<code>zsh</code>，否则跳过此步。</strong></p><pre class=" language-bash"><code class="language-bash">chsh -s /bin/zsh</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> vimbrew <span class="token function">install</span> <span class="token function">git</span><span class="token comment" spellcheck="true"># 下载oh-my-zsh</span><span class="token function">git</span> clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<span class="token comment" spellcheck="true"># 创建一个新的配置文件</span><span class="token function">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<span class="token comment" spellcheck="true"># 授权，如果不授权每次会有警告</span><span class="token function">chmod</span> 755 /usr/local/share/zsh<span class="token function">chmod</span> 755 /usr/local/share/zsh/site-functions</code></pre><p>退出并重启终端 command q</p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载命令高亮插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting<span class="token comment" spellcheck="true"># 配置插件生效</span><span class="token keyword">echo</span> <span class="token string">'# 命令高亮\nsource ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh'</span> <span class="token operator">>></span> ~/.zshrc<span class="token comment" spellcheck="true"># 下载命令提示插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions<span class="token comment" spellcheck="true"># 配置插件生效</span><span class="token keyword">echo</span> <span class="token string">'# 命令提示\nsource ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh'</span> <span class="token operator">>></span> ~/.zshrc</code></pre>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/16107.html"/>
      <url>posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
